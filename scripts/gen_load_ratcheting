#! /usr/bin/env python3


import sys

from jsonpickle import json
from ledger.stores.text_file_store import TextFileStore
from plenum.common.looper import Looper
from plenum.common.signer_simple import SimpleSigner
from plenum.common.txn import TARGET_NYM, TXN_TYPE, NYM, ROLE, USER, NEW_NODE, DATA, ALIAS, CLIENT_IP, CLIENT_PORT
from plenum.common.types import HA, CLIENT_STACK_SUFFIX

from sovrin.client.client import Client
from sovrin.common.config_util import getConfig

# general configs
secondsInOneCycle = 86400


# Usage with default configs: gen_load_ratcheting
# Default script argument values given below
perDayCount = 5000
dailyIncreasePer = 50
signerSeed = b'FCU11111111111111111111111111111'


# Usage with passing arguments: gen_load_ratcheting 3000 30 EvernymV111111111111111111111111
# First argument = How many request needs to be submitted in secondsInOneCycle
# Second argument = By what percent, daily request count should be increased
# Third argument = Signer seed for client from which requests will be sent

if len(sys.argv) == 2:
    perDayCount = int(sys.argv[1])

if len(sys.argv) == 3:
    dailyIncreasePer = int(sys.argv[2])

if len(sys.argv) == 4:
    signerSeed = bytes(sys.argv[3])

print("signer seed: {}".format(signerSeed))
print("per day count: {}".format(perDayCount))
print("daily increase percentage: {}".format(dailyIncreasePer))

config = getConfig()

ledger = TextFileStore(dbDir=config.baseDir, dbName=config.poolTransactionsFile, isLineNoKey=True)
stewardIdentifier = None
cliNodeReg = {}

for seqNo, txn in ledger.iterator():
    txn = json.loads(txn)
    if txn[TXN_TYPE] == NEW_NODE:
            data = txn[DATA]
            cliNodeReg[data[ALIAS] + CLIENT_STACK_SUFFIX] = HA(data[CLIENT_IP],
                                                               data[CLIENT_PORT])
print(cliNodeReg)

with Looper(debug=True) as looper:
    clientName = "load-generator-client"
    sponsorSigner = SimpleSigner(seed=signerSeed)
    # create client with sponsor signer
    clientAddress = HA(host='0.0.0.0', port=5678)
    client = Client(clientName,
                    nodeReg=cliNodeReg,
                    ha=clientAddress,
                    signer=sponsorSigner,
                    basedirpath=config.baseDir)
    looper.add(client)
    looper.runFor(3)

    i = 0
    dayCount = 0
    while i < perDayCount:
        nym = SimpleSigner().verstr
        op = {
            TARGET_NYM: nym,
            TXN_TYPE: NYM,
            ROLE: USER
        }
        client.submit(op, identifier=client.defaultIdentifier)
        sleepTime = secondsInOneCycle / perDayCount
        print("\nDay:{}, Iteration: {}".format(dayCount, i))
        print("  Will sleep for {} seconds".format(sleepTime))
        looper.runFor(sleepTime)
        i += 1
        if i == perDayCount:
            print("  request for current day is finished, now resetting variables...".format(i))
            i = 0
            dayCount += 1
            perDayCount = int(perDayCount + (perDayCount*dailyIncreasePer/100))

